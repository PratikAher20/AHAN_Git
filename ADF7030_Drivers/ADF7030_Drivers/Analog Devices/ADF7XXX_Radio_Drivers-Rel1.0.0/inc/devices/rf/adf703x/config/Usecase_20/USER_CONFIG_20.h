
/*!
 *****************************************************************************
 * @file    USER_CONFIG_20.h
 * @brief   Firmware header file containing defaults configuration 
 * @version $REVISION: $
 * @date    $DATE: $
 *----------------------------------------------------------------------------
 *
Copyright (c) 2010-2016 Analog Devices, Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:
- Redistributions of source code must retain the above copyright notice, 
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice, 
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
- Modified versions of the software must be conspicuously marked as such.
- This software is licensed solely and exclusively for use with processors
  manufactured by or for Analog Devices, Inc.
- This software may not be combined or merged with other code in any manner
  that would cause the software to become subject to terms and conditions
  which differ from those listed here.
- Neither the name of Analog Devices, Inc. nor the names of its
  contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.
- The use of this software may or may not infringe the patent rights of one
  or more patent holders.  This license does not release you from the
  requirement that you obtain separate licenses from these patent holders
  to use this software.

THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES, INC. AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, NON- 
INFRINGEMENT, TITLE, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL ANALOG DEVICES, INC. OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, DAMAGES ARISING OUT OF
CLAIMS OF INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT; PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

*****************************************************************************/ 

/**
 * @brief		The file holds the default configuration parameters that must
 *                      be downloaded to the Radio PHY on startup (before leaving PHY_OFF
 *                      state) or upon wakeup with retention of the BBRAM memory.
 *
 * @details		...
 * 
 * HOST SEQUENCES:
 * --------------- 
 * 	
 *      - Configuring the Radio PHY for USER_CONFIGURATION_XXX
 * 		0. Radio PHY must be in PHY_OFF
 *  	        1. Load the User Config 
 *  	        2. Load the Profiles Config
 *  	        3. Load the Packet Config
 *  	        4. Apply runtime changes (Freq Changes, PA etc...)
 *  	        5. Issue Cmd_Config_Dev.
 *  	        6. Radio Phy ready for operation...
 *  
 *      The retain BBRAM bit must be set for the USER_CONFIGURATION to persit
 *      in the event of a system reset or power cycle
 * 
 * 
 * HOWTO: (ADI Radio drivers)
 * ------
 * 	
 * 	- Download configuration to PHY Radio:
 * 		
 * 		adf7030_1__WriteConfig(hSPIDevice, &USER_CONFIG_XXX);
 *
 *   	- Verify configuration of PHY Radio:
 * 		
 * 		adf7030_1__VerifyConfig(hSPIDevice, &USER_CONFIG_XXX);
 *      ...
 *
 *  @note blablabla
 *
 */ 


#ifndef __USER_CONFIG_20__
#define __USER_CONFIG_20__

#include <adf7030-1__common.h>

static const uint8_t UC20__ANAFILT_RAM_LUT0[] = { // 0x2000060c - 24
  0x00, 0x03, 0x7c, 0x36, 0x27, 0x00, 0x01, 0x00, 0x94, 0x6a, 0x02, 0x69, 0x94, 0xc0, 0x00, 0x69,
  0x94, 0xa5, 0x00, 0x69, 0x94, 0xa8, 0x00, 0x69
};

static const uint8_t UC20__ANAFILT_RAM_LUT1[] = { // 0x20000624 - 24
  0x1f, 0x03, 0x7c, 0x22, 0x0d, 0x00, 0x01, 0x00, 0x29, 0x20, 0xc1, 0xf1, 0x29, 0x20, 0xc1, 0xe0,
  0x23, 0x05, 0xc1, 0xd9, 0x28, 0x07, 0x14, 0xec
};

static const uint8_t UC20__ANAFILT_RAM_LUT2[] = { // 0x2000063c - 24
  0x00, 0x01, 0x0c, 0x12, 0xa1, 0x00, 0x01, 0x00, 0xdb, 0xa0, 0x81, 0xb2, 0xdb, 0xa0, 0x81, 0xb2,
  0xdb, 0xe1, 0x80, 0xb2, 0xdb, 0xe6, 0x00, 0xb2
};

static const uint8_t UC20__DIGFILT_RAM_LUT0[] = { //0x200006b4 - 32
  0x23, 0x7f, 0x3b, 0x3f, 0xb3, 0x7d, 0xcb, 0x3d, 0x80, 0x7c, 0x98, 0x3c, 0xa5, 0x7b, 0xbd, 0x3b,
  0x33, 0x7b, 0x4b, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t UC20__DIGFILT_RAM_LUT1[] = { //0x200006d4 - 32
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t UC20__DIGFILT2_RAM_LUT0[] = { // 0x20000794 - 20
  0x24, 0x01, 0x00, 0x00, 0xdc, 0x39, 0xa3, 0x2b, 0x8a, 0x41, 0x72, 0x48, 0xd5, 0x13, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

static const uint8_t UC20__DIGFILT2_RAM_LUT1[] = { // 0x200007a8 - 20
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

static const uint8_t UC20__RSSI_RAM_LUT0[] = { //0x20000864 - 28
  0x2e, 0x00, 0x1a, 0x00, 0x57, 0x3b, 0x1b, 0x00, 0x00, 0x17, 0x00, 0x00, 0x52, 0x37, 0x1b, 0x00,
  0x60, 0x45, 0x29, 0x0e, 0x6e, 0x52, 0x37, 0x1b, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t UC20__RSSI_RAM_LUT1[] = { //0x20000880 - 28
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t UC20__PROFILE_CFG0[] = { //0x200002e4 - 264
  0x6e, 0x48, 0x30, 0x00, 0x80, 0xba, 0x8c, 0x11, 0xc0, 0xca, 0x89, 0x36, 0x4c, 0x70, 0x07, 0x00,
  0xf4, 0x04, 0x00, 0x00, 0x22, 0x00, 0x00, 0x12, 0xdc, 0x05, 0x00, 0x64, 0x6b, 0x58, 0x1a, 0x01,
  0x0e, 0x60, 0x6c, 0x00, 0x77, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x04, 0xf2, 0x00,
  0x80, 0x24, 0x02, 0x5e, 0x14, 0x0f, 0x02, 0x0f, 0x07, 0x05, 0x05, 0x00, 0x02, 0x00, 0x28, 0x05,
  0x20, 0xe5, 0xe7, 0x92, 0x24, 0x03, 0x82, 0x00, 0xa0, 0x32, 0x1c, 0xdc, 0x00, 0x06, 0x00, 0x10,
  0x02, 0x7f, 0x60, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x01, 0x06,
  0x9c, 0x10, 0x00, 0x02, 0x0a, 0x64, 0xc0, 0xfc, 0xc8, 0x90, 0x05, 0x00, 0x59, 0x3c, 0x38, 0x34,
  0x10, 0x01, 0x03, 0x7c, 0x76, 0xc8, 0x33, 0x04, 0x0a, 0xd3, 0x2f, 0x10, 0x02, 0x90, 0x99, 0x80,
  0x0c, 0x06, 0x00, 0x20, 0x01, 0x04, 0x04, 0x00, 0x0b, 0xb5, 0xc1, 0x08, 0x10, 0x00, 0x10, 0x00,
  0x6a, 0x01, 0x90, 0x02, 0x43, 0x0f, 0xe8, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0a,
  0x20, 0x21, 0x04, 0x06, 0x05, 0x07, 0x16, 0x17, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00
};

static const uint8_t UC20__PACKET_CFG0[] = { //0x200004f4 - 112
  0x06, 0xe3, 0x15, 0x00, 0x80, 0x00, 0x01, 0x00, 0x60, 0x00, 0x10, 0xd0, 0x17, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07,
  0x75, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x43, 0x37, 0x44,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};

/** 
* @Host general track/debug info
*       __NAME__ __REPO__ __VERION__
*       + info of like modulation type, datarate, modindex etc...
*/
static const uint8_t UC20__INFO[] = {
  0x06, 0xe3, 0x15, 0x00, 0x80, 0x00, 0x01, 0x00, 0x60, 0x00, 0x10, 0xd0, 0x17, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07,
  0x75, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x43, 0x37, 0x44
};

//Syncword modifications
static const uint8_t UC20__OPT_CFG0[] = { //0x200000c0 - 4 
  0xd0, 0x60, 0x03, 0x24
};

static const uint8_t UC20__OPT_CFG1[] = { //0x20000ae0 - 16
  0x02, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x9d, 0x3a, 0x00, 0x00, 0x04, 0x3e, 0x10, 0x3e
};

static const uint8_t UC20__OPT_CFG2[] = { //0x40003e04 - 4
  0xc0, 0x00, 0x00, 0x00
};

static const uint8_t UC20__OPT_CFG3[] = { //0x40003e10 - 4
  0x9d, 0x3a, 0x00, 0x00
};

/*
static const uint8_t UC20__OPT_CFG2[] = { //0x40003e04 - 16
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x3a, 0x00, 0x00
};
*/


//__root static MEM_CFG_DESCRIPTOR_Type OPTIONAL_CONFIG_20 = {
KEEP_VAR(static MEM_CFG_DESCRIPTOR_Type OPTIONAL_CONFIG_20) = {
  .Name = {"TMP_CONFIG_20\0"},
  .Size = 28,
  .nbBlock = 4,
  .pInfo = NULL,
  .pNext = NULL,
  {
    {.Size = 4, .Volatile = 0, .WordXfer = 0, .Addr = 0x200000C0, .pData = UC20__OPT_CFG0 },
    {.Size = 16, .Volatile = 0, .WordXfer = 0, .Addr = 0x20000ae0, .pData = UC20__OPT_CFG1 },
    {.Size = 4, .Volatile = 1, .WordXfer = 1, .Addr = 0x40003e04, .pData = UC20__OPT_CFG2 },
    {.Size = 4, .Volatile = 0, .WordXfer = 1, .Addr = 0x40003e10, .pData = UC20__OPT_CFG3 },
  }
};

//__root static MEM_CFG_DESCRIPTOR_Type USER_CONFIG_20 = {
KEEP_VAR(static MEM_CFG_DESCRIPTOR_Type USER_CONFIG_20) = {
  .Name = {"USER_CONFIG_20\0"}, 
  .Size = 608,
  .nbBlock = 11,
  .pInfo = (config_info_t *)&UC20__INFO,
  .pNext = (MEM_CFG_DESCRIPTOR_Type *)&OPTIONAL_CONFIG_20,
  {
    {.Size = 24, .Volatile = 0, .WordXfer = 0, .Addr = 0x2000060c, .pData = UC20__ANAFILT_RAM_LUT0 },
    {.Size = 24, .Volatile = 0, .WordXfer = 0, .Addr = 0x20000624, .pData = UC20__ANAFILT_RAM_LUT1 },
    {.Size = 24, .Volatile = 0, .WordXfer = 0, .Addr = 0x2000063c, .pData = UC20__ANAFILT_RAM_LUT2 },
    {.Size = 32, .Volatile = 0, .WordXfer = 0, .Addr = 0x200006b4, .pData = UC20__DIGFILT_RAM_LUT0 },
    {.Size = 32, .Volatile = 0, .WordXfer = 0, .Addr = 0x200006d4, .pData = UC20__DIGFILT_RAM_LUT1 },
    {.Size = 20, .Volatile = 0, .WordXfer = 0, .Addr = 0x20000794, .pData = UC20__DIGFILT2_RAM_LUT0 },
    {.Size = 20, .Volatile = 0, .WordXfer = 0, .Addr = 0x200007a8, .pData = UC20__DIGFILT2_RAM_LUT1 },
    {.Size = 28, .Volatile = 0, .WordXfer = 0, .Addr = 0x20000864, .pData = UC20__RSSI_RAM_LUT0 },
    {.Size = 28, .Volatile = 0, .WordXfer = 0, .Addr = 0x20000880, .pData = UC20__RSSI_RAM_LUT1 },
    {.Size = 264, .Volatile = 0, .WordXfer = 0, .Addr = 0x200002e4, .pData = UC20__PROFILE_CFG0 },
    {.Size = 112, .Volatile = 0, .WordXfer = 0, .Addr = 0x200004f4, .pData = UC20__PACKET_CFG0 },
  }
};

#endif //__USER_CONFIG_20__
